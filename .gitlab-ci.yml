image: python:3.6

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"

stages:
- test
- doc
- deploy

test:2.7:
  stage: test
  image: python:2.7
  allow_failure: false
  script:
  - git --no-pager diff --check `git log --oneline | tail -1 | cut --fields=1 --delimiter=' '`
  - python -V
  - pip install -r requirements.txt
  - flake8
  - py.test -vv --cov-config .coveragerc --cov geolink_formatter tests

test:3.4:
  stage: test
  image: python:3.4
  allow_failure: false
  script:
  - git --no-pager diff --check `git log --oneline | tail -1 | cut --fields=1 --delimiter=' '`
  - python -V
  - pip install -r requirements.txt
  - flake8
  - py.test -vv --cov-config .coveragerc --cov geolink_formatter tests

test:3.5:
  stage: test
  image: python:3.5
  allow_failure: false
  script:
  - git --no-pager diff --check `git log --oneline | tail -1 | cut --fields=1 --delimiter=' '`
  - python -V
  - pip install -r requirements.txt
  - flake8
  - py.test -vv --cov-config .coveragerc --cov geolink_formatter tests

test:3.6:
  stage: test
  image: python:3.6
  cache:
    key: "$CI_PIPELINE_ID"
    paths:
    - "$CI_PROJECT_DIR/.pip-cache"
  allow_failure: false
  script:
  - git --no-pager diff --check `git log --oneline | tail -1 | cut --fields=1 --delimiter=' '`
  - python -V
  - pip install -r requirements.txt
  - flake8
  - py.test -vv --cov-config .coveragerc --cov geolink_formatter tests

sphinx:
  stage: doc
  cache:
    key: "$CI_PIPELINE_ID"
    paths:
    - "$CI_PROJECT_DIR/.pip-cache"
  script:
  - pip install -r requirements.txt
  - sphinx-versioning build doc/source doc/build/html
  artifacts:
    paths:
    - doc/build/html
    expire_in: 1 day
  only:
  - tags
  - master

pages:
  stage: deploy
  cache:
    key: "$CI_PIPELINE_ID"
    paths:
    - "$CI_PROJECT_DIR/.pip-cache"
  dependencies:
  - sphinx
  script:
  - mv doc/build/html/ public/
  artifacts:
    paths:
    - public
    expire_in: 1 day
  only:
  - tags
  - master

# Analyze code quality
codeclimate:
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD/geolink_formatter" --volume "$PWD/geolink_formatter":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate init
    - docker run --env CODECLIMATE_CODE="$PWD/geolink_formatter" --volume "$PWD/geolink_formatter":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]
  only:
    - branches
